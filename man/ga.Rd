% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ga.R
\name{ga}
\alias{ga}
\title{A class to connstruct, execute and analyse a genetic algorithm.}
\description{
This class will store data during the execution of a genetic algorithm. As well as this,
it contains a number of methods to interact with the algorithm and UI functionality to
view the results and ammend parameters during execution.
}
\details{
To get started, using the new() method to begin.
}
\examples{

## ------------------------------------------------
## Method `ga$new`
## ------------------------------------------------

brach <- gapackage::ga$new(
dim = c(10, 1000),
parameters = list(
 initial_min     = 0,
 B_x             = 180,
 initial_max     = 40,
 A_y             = 40,
 geno_length     = 2,
 g               = 9.81,
 remove          = 0.5,
 add_proportion  = 0.5,
 mutation_size   = 0.0000007,
 generations     = 100,
 population_size = 3000,
 maximise        = FALSE,
 location        = 0,
 minkowski_p     = 100
 ),
 store_data = FALSE,
 initial = initial_rand_uni_3d
);

## ------------------------------------------------
## Method `ga$add_operators`
## ------------------------------------------------

brach$add_operators(
  operators = list(
    mutation_cauchy,
    crossover_basic_3d
  )
)

brach$add_operators(
   mutation_cauchy
)

## ------------------------------------------------
## Method `ga$add_metric`
## ------------------------------------------------

self$add_metric(name = "average_fitness", value = sum(fitnesses) / length(fitnesses));

## ------------------------------------------------
## Method `ga$add_dependents`
## ------------------------------------------------

brach$add_dependents(
  dependents = list(
    fitness_function_single = utility_fitness_brachistochrone_3d,
    fitness_function = utility_fitness_population_3d
  )
)

## ------------------------------------------------
## Method `ga$add_dependent`
## ------------------------------------------------

brach$add_dependents(
  dependents = list(
    fitness_function_single = utility_fitness_brachistochrone_3d
  )
)

## ------------------------------------------------
## Method `ga$next_operator`
## ------------------------------------------------

brach$next_operator()

## ------------------------------------------------
## Method `ga$next_iteration`
## ------------------------------------------------

brach$next_iteration()

## ------------------------------------------------
## Method `ga$generate_server`
## ------------------------------------------------

brach$generate_server()

## ------------------------------------------------
## Method `ga$add_output_graph`
## ------------------------------------------------

brach$add_output_graph(
 list(
   xlab = "horizontal distance",
   ylab = "vertical distance",
   FUN = manhattan_plot
 )
)

## ------------------------------------------------
## Method `ga$add_output_graphs`
## ------------------------------------------------

brach$add_output_graphs(
 list(
   list(
     xlab = "horizontal distance",
     ylab = "vertical distance",
     FUN = manhattan_plot
   ),
   list(
     xlab = "horizontal distance",
     ylab = "vertical distance",
     FUN = manhattan_plot
   )
 )
)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{par}}{a named list containing function parameters}

\item{\code{dim}}{the dimensions of the population array}

\item{\code{population}}{the population array}

\item{\code{operators}}{an ordered list of the operator functions}

\item{\code{dependents}}{function used by the operators}

\item{\code{metrics}}{a list containing custom metrics stored during the execution of the simulation}

\item{\code{output_graphs}}{a list of functions that produce a 2D graph (UI only)}

\item{\code{time}}{the number of operators that have been executed}

\item{\code{paused}}{whether the simulation is paused or not (UI only)}

\item{\code{speed}}{the number of generations executed every second (UI only)}

\item{\code{store_data}}{boolean which determines the amount of information which is stored}

\item{\code{stored_df}}{data frame used to store metric data}

\item{\code{current_generation}}{the number of times that every operators has been executed}

\item{\code{shiny_ui}}{the UI code (UI only)}

\item{\code{shiny_server}}{variable to store the shiny server function}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ga$new()}}
\item \href{#method-add_operators}{\code{ga$add_operators()}}
\item \href{#method-add_operator}{\code{ga$add_operator()}}
\item \href{#method-add_metric}{\code{ga$add_metric()}}
\item \href{#method-add_dependents}{\code{ga$add_dependents()}}
\item \href{#method-add_dependent}{\code{ga$add_dependent()}}
\item \href{#method-next_operator}{\code{ga$next_operator()}}
\item \href{#method-next_iteration}{\code{ga$next_iteration()}}
\item \href{#method-generate_server}{\code{ga$generate_server()}}
\item \href{#method-add_output_graph}{\code{ga$add_output_graph()}}
\item \href{#method-add_output_graphs}{\code{ga$add_output_graphs()}}
\item \href{#method-run_ui}{\code{ga$run_ui()}}
\item \href{#method-save_data}{\code{ga$save_data()}}
\item \href{#method-clone}{\code{ga$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
This method allows you to initialize a ga class instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$new(dim, initial, parameters = list(), store_data = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dim}}{the dimensions of the population array, with the last dimension being the size of the population.}

\item{\code{initial}}{the function used to generate the initial population.}

\item{\code{parameters}}{a named list containing parameters used in the operator and dependancy function}

\item{\code{store_data}}{a boolean value which indicates how much data is stored during the simulation.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach <- gapackage::ga$new(
dim = c(10, 1000),
parameters = list(
 initial_min     = 0,
 B_x             = 180,
 initial_max     = 40,
 A_y             = 40,
 geno_length     = 2,
 g               = 9.81,
 remove          = 0.5,
 add_proportion  = 0.5,
 mutation_size   = 0.0000007,
 generations     = 100,
 population_size = 3000,
 maximise        = FALSE,
 location        = 0,
 minkowski_p     = 100
 ),
 store_data = FALSE,
 initial = initial_rand_uni_3d
);
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_operators"></a>}}
\if{latex}{\out{\hypertarget{method-add_operators}{}}}
\subsection{Method \code{add_operators()}}{
A method to add an operator / operators to the genetic algorithm.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_operators(operators)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{operators}}{a single function or a list of functions which have an operator structure.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$add_operators(
  operators = list(
    mutation_cauchy,
    crossover_basic_3d
  )
)

brach$add_operators(
   mutation_cauchy
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_operator"></a>}}
\if{latex}{\out{\hypertarget{method-add_operator}{}}}
\subsection{Method \code{add_operator()}}{
A method to add single operator to the genetic algorithm
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_operator(operator)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{operator}}{a single function which has an operator structure.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
It is recommended that you use the add_operators() function instead.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_metric"></a>}}
\if{latex}{\out{\hypertarget{method-add_metric}{}}}
\subsection{Method \code{add_metric()}}{
A method to add a metric to track during the simulation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_metric(name, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of the metric you want to track.}

\item{\code{value}}{the expression corresponding to the value of the metric.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This should only be run in either a dependency or an operator function.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{self$add_metric(name = "average_fitness", value = sum(fitnesses) / length(fitnesses));
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_dependents"></a>}}
\if{latex}{\out{\hypertarget{method-add_dependents}{}}}
\subsection{Method \code{add_dependents()}}{
A method to add a single dependency or a list of multiple dependencies
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_dependents(dependents)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dependents}}{a single dependency or a list of multiple dependancies}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$add_dependents(
  dependents = list(
    fitness_function_single = utility_fitness_brachistochrone_3d,
    fitness_function = utility_fitness_population_3d
  )
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_dependent"></a>}}
\if{latex}{\out{\hypertarget{method-add_dependent}{}}}
\subsection{Method \code{add_dependent()}}{
A method to add a single dependency function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_dependent(dependent)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dependent}}{a named list containing one dependent.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$add_dependents(
  dependents = list(
    fitness_function_single = utility_fitness_brachistochrone_3d
  )
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-next_operator"></a>}}
\if{latex}{\out{\hypertarget{method-next_operator}{}}}
\subsection{Method \code{next_operator()}}{
A method to run the next operator in the ordered operators list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$next_operator()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$next_operator()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-next_iteration"></a>}}
\if{latex}{\out{\hypertarget{method-next_iteration}{}}}
\subsection{Method \code{next_iteration()}}{
A method to run through all the operators once.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$next_iteration()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$next_iteration()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate_server"></a>}}
\if{latex}{\out{\hypertarget{method-generate_server}{}}}
\subsection{Method \code{generate_server()}}{
A method to generate the R Shiny server function (UI Only)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$generate_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a function intended to be used as an R Shiny server function.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$generate_server()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_output_graph"></a>}}
\if{latex}{\out{\hypertarget{method-add_output_graph}{}}}
\subsection{Method \code{add_output_graph()}}{
a method to add an output graph to the output tab in the UI (UI Only)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_output_graph(parameters)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameters}}{a named list containing a function and chart output settings}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$add_output_graph(
 list(
   xlab = "horizontal distance",
   ylab = "vertical distance",
   FUN = manhattan_plot
 )
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_output_graphs"></a>}}
\if{latex}{\out{\hypertarget{method-add_output_graphs}{}}}
\subsection{Method \code{add_output_graphs()}}{
a method to add multiple output graphs to the output tab in the UI (UI Only)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$add_output_graphs(parameters)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameters}}{a list containing many named lists which contain multiple function and chart output settings}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{brach$add_output_graphs(
 list(
   list(
     xlab = "horizontal distance",
     ylab = "vertical distance",
     FUN = manhattan_plot
   ),
   list(
     xlab = "horizontal distance",
     ylab = "vertical distance",
     FUN = manhattan_plot
   )
 )
)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_ui"></a>}}
\if{latex}{\out{\hypertarget{method-run_ui}{}}}
\subsection{Method \code{run_ui()}}{
A method to open the UI.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$run_ui()}\if{html}{\out{</div>}}
}

\subsection{Details}{
You should only have one localhost open at any particular time.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save_data"></a>}}
\if{latex}{\out{\hypertarget{method-save_data}{}}}
\subsection{Method \code{save_data()}}{
A method to save the data stored during the simulation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$save_data(path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{the path of the csv file that will be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ga$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
